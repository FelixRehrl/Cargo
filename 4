package it.uniroma1.di.tmancini.teaching.ai.search.graphPlanner;

import it.uniroma1.di.tmancini.teaching.ai.search.cargo.Cargo;
import it.uniroma1.di.tmancini.teaching.ai.search.cargo.CargoAction;
import it.uniroma1.di.tmancini.teaching.ai.search.cargo.CargoState;
import it.uniroma1.di.tmancini.teaching.ai.search.cargo.CargoAction.FlyCargoAction;
import it.uniroma1.di.tmancini.teaching.ai.search.cargo.CargoFileParser;

import java.lang.reflect.Array;
import java.util.HashSet;
import java.util.*;
import java.util.concurrent.Callable;

import picocli.CommandLine;

public class Main implements Callable {

        @CommandLine.Option(names = { "-f",
                        "--file" }, defaultValue = "NULL", description = "The file presenting the input data ( planes, airports, cargoes ) and the initial state")

        private String file_path;

        private Cargo problem;

        private ArrayList<String> initial_fluents;

        private static ArrayList<String> predicates_verbose = new ArrayList<>();

        public static void main(String[] args) {

                int exitCode = new CommandLine(new Main()).execute(args);

        }

        @Override
        public Integer call() throws Exception {

                intilize_cargo_problem();
                create_graph_planning_actions();

                return 1;
                // Define actions
                // Define propositions
                // Set<Proposition> preconditions1 = new HashSet<>(Arrays.asList(p1));
                // Set<Proposition> effects1 = new HashSet<>(Arrays.asList(p2, p3));
                // Action action1 = new Action("MoveAtoB", preconditions1, effects1);
                //
                // Set<Proposition> preconditions2 = new HashSet<>(Arrays.asList(p2));
                // Set<Proposition> effects2 = new HashSet<>(Arrays.asList(p1, p4));
                // Action action2 = new Action("MoveBtoA", preconditions2, effects2);
                //
                // Set<Action> actions = new HashSet<>(Arrays.asList(action1, action2));
                //
                // // Initial state
                // Set<Proposition> initialState = new HashSet<>(Arrays.asList(p1));
                //
                // // Build the planning graph
                // PlanningGraph planningGraph = new PlanningGraph(initialState, actions, 3);
                // planningGraph.printPlanningGraph();
        }

        private void create_graph_planning_actions() {
                ArrayList<CargoAction.FlyCargoAction> fly_actions = CargoAction.CargoActionFactory.getFlyActions();
                for (FlyCargoAction flyCargoAction : fly_actions) {
                        Set<Proposition> preconditions = new HashSet<>();
                        Set<Proposition> effects = new HashSet<>();

                        for (String precondition : flyCargoAction.getStringPreconditions()) {
                                preconditions.add(new Proposition(precondition));
                        }

                        for (String neg_effect : flyCargoAction.getStringNegativeEffects()) {
                                preconditions.add(new Proposition(neg_effect));
                        }

                }
        }

        private void intilize_cargo_problem() {
                this.problem = new Cargo();
                problem.instaniate_problem(this.file_path);
                problem.initialize_fly_actions();
                problem.initialize_load_and_unload_actions();

        }
}
