package it.uniroma1.di.tmancini.teaching.ai.search.cargo;

import it.uniroma1.di.tmancini.teaching.ai.search.*;
import picocli.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.concurrent.Callable;

public class Cargo extends Problem implements Callable<Integer> {

        public static enum Heuristics {
                MANHATTAN, TILES_OUT_OF_PLACE
        }

        @CommandLine.Option(names = { "--algos",
                        "--algorithms" }, required = true, split = ",", description = "The algorithms to use, as a double quoted comma-separated list. Valid values are"
                                        +
                                        "{BFS, DFS, MINCOST, A*:<heuristics>, BFG:<heuristics>}, where" +
                                        "<heuristics> can be MANHATTAN or TILES_OUT_OF_PLACE")
        private String[] algos;

        @CommandLine.Option(names = { "-v",
                        "--verbosity" }, defaultValue = "0", description = "The verbosity level of the output, as a positive integer number. "
                                        +
                                        "0 corresponds to 'standard', while higher numbers correspond to higher verbosity.")
        private int vlevel;

        private Cargo.Heuristics h;

        public Cargo() {
                super("Puzzle");
                this.h = null;
        }

        private void checkInput() throws IllegalArgumentException {
                System.out.println("checkInput called");
        }

        @Override
        public Integer call() {
                return 1;
        }

        private List<String> getAlgorithmAndHeuristics(String algo) {
                return null;
        }

        public static boolean hasHeuristics(String test) {
                return true;
        }

        public int getSize() {
                return size;
        }

        public Heuristics getHeuristics() {
                return h;
        }

        public void setHeuristics(Heuristics h) {
                this.h = h;
        }

        public void clearHeuristics() {
                this.h = null;
        }

        public Random getRandom() {
                return this.random;
        }

        private static void printOutputHeader() {
                System.out.println("\n======================================================" +
                                "=\n=\t\tSearchStateExplorer\t\t      =\n" +
                                "=\t\t  Example: Cargo\t\t      =\n" +
                                "= Computer Science Dept - Sapienza University of Rome =\n" +
                                "=======================================================\n");
        }

        public static void main(String[] args) {
                System.out.println("Let's fucking go, we have set up the project");
                printOutputHeader();
                int exitCode = new CommandLine(new Cargo()).execute(args);

                System.out.printf("%nExecution completed. Exiting %s errors.%n", exitCode > 0 ? "with" : "without");
                System.exit(exitCode);
        }
}
